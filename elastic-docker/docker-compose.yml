---
version: "2.1"
services: 
  #Auditbeat container
  auditbeat:
    image: "docker.elastic.co/beats/auditbeat:${ELASTIC_VERSION}"
    container_name: auditbeat
    hostname: auditbeat
    user: root
    volumes:
      #Mount the Auditbeat configuration so users can make edits.
      - ./beats/auditbeat/auditbeat.yml:/usr/share/auditbeat/auditbeat.yml
      #Allows us to report on docker from the hosts information.
      - /var/run/docker.sock:/var/run/docker.sock  
    command: ./auditbeat -strict.perms=false -E cloud.id=${BLOCKCHAIN_CLUSTER_UUID} -E cloud.auth=elastic:${BLOCKCHAIN_CLUSTER_PASS} -E monitoring.cloud.id=${MONITORING_CLUSTER_UUID} -E monitoring.cloud.auth=elastic:${MONITORING_CLUSTER_PASS}  -E monitoring.elasticsearch.hosts=${MONITORING_ES_HOST} -E monitoring.cluster_uuid=${MONITORING_CLUSTER_UUID}
    cap_add: ['AUDIT_CONTROL', 'AUDIT_READ']
    networks: ['stack']
    restart: on-failure
    # secrets:
    #   - source: auditbeat.yml
    #     target: /usr/share/auditbeat/auditbeat.yml
    #   - source: auditbeat.keystore
    #     target: /usr/share/auditbeat/auditbeat.keystore
    #   - source: ca.crt
    #     target: /usr/share/auditbeat/certs/ca/ca.crt
    # Auditbeat must run in the main process namespace.
    pid: host
    healthcheck:
      test: auditbeat --strict.perms=false test beats
      interval: 30s
      timeout: 15s
      retries: 5
  


  #Heartbeat container
  heartbeat:
    container_name: heartbeat
    hostname: heartbeat
    user: root #To read the docker socket
    image: "docker.elastic.co/beats/heartbeat:${ELASTIC_VERSION}"
    volumes:
      #Mount the Heartbeat configuration so users can make edits.
      - ./beats/heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml
      #Allows us to report on docker from the hosts information.
      - /var/run/docker.sock:/var/run/docker.sock
    command: heartbeat -e -strict.perms=false -E cloud.id=${BLOCKCHAIN_CLUSTER_UUID} -E cloud.auth=elastic:${BLOCKCHAIN_CLUSTER_PASS}  -E monitoring.cloud.id=${MONITORING_CLUSTER_UUID} -E monitoring.cloud.auth=elastic:${MONITORING_CLUSTER_PASS} -E monitoring.elasticsearch.hosts=${MONITORING_ES_HOST} -E monitoring.cluster_uuid=${MONITORING_CLUSTER_UUID}
    # secrets:
    #   - source: heartbeat.yml
    #     target: /usr/share/heartbeat/heartbeat.yml
    #   - source: heartbeat.keystore
    #     target: /usr/share/heartbeat/heartbeat.keystore
    #   - source: ca.crt
    #     target: /usr/share/heartbeat/certs/ca/ca.crt
    networks: ['stack']
    restart: on-failure
    healthcheck:
      test: heartbeat test beats
      interval: 30s
      timeout: 15s
      retries: 5

  #Filebeat container
  filebeat:
    container_name: filebeat
    hostname: filebeat
    user: root #To read the docker socket
    image: "docker.elastic.co/beats/filebeat:${ELASTIC_VERSION}"
    volumes:
    #Mount the Filebeat configuration so users can make edits.
      - ./beats/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
    #Mount the module directory. Users can in turn add propspectors to this directory and they will be dynamically loaded.
      - ./beats/filebeat/modules.d/:/usr/share/filebeat/modules.d/
      - ./beats/filebeat/modules.d/elastic-sa-dd4f67d589f9.json:/usr/share/filebeat/modules.d/elastic-sa-dd4f67d589f9.json
    #Mount the hosts system log directory. This represents the logs of the VM hosting docker. Consumed by the Filebeat system module.
      - /private/var/log/:/var/log/host/:ro
    #Mount the Docker logs for indexing by the custom prospector ./config/filebeat/prospectors.d.
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    #Named volume fsdata. This is used to persist the registry file between restarts, so to avoid data duplication.
      - filebeatdata:/usr/share/filebeat/data/
    #Allows us to report on docker from the hosts information.
      - /var/run/docker.sock:/var/run/docker.sock:ro
    #Mount the logs from CORDA log directory
      - /opt/corda/network/nodes/barclays_node/logs:/opt/corda/network/nodes/barclays_node/logs
      - /opt/corda/network/nodes/alfa_node/logs:/opt/corda/network/nodes/alfa_node/logs
      - /opt/corda/network/nodes/notary/logs:/opt/corda/network/nodes/notary/logs
    #Mount the node configs from CORDA directory
      - /opt/corda/network/nodes/barclays_node/:/opt/corda/network/nodes/barclays_node/
      - /opt/corda/network/nodes/alfa_node/:/opt/corda/network/nodes/alfa_node/
      - /opt/corda/network/nodes/notary/:/opt/corda/network/nodes/notary/

    networks: ['stack']
    command: filebeat -e -strict.perms=false -E cloud.id=${BLOCKCHAIN_CLUSTER_UUID} -E cloud.auth=elastic:${BLOCKCHAIN_CLUSTER_PASS} -E monitoring.cloud.id=${MONITORING_CLUSTER_UUID} -E monitoring.cloud.auth=elastic:${MONITORING_CLUSTER_PASS} -E monitoring.elasticsearch.hosts=${MONITORING_ES_HOST} -E monitoring.cluster_uuid=${MONITORING_CLUSTER_UUID}
    # secrets:
    #   - source: filebeat.yml
    #     target: /usr/share/filebeat/filebeat.yml
    #   - source: filebeat.keystore
    #     target: /usr/share/filebeat/filebeat.keystore
    #   - source: ca.crt
    #     target: /usr/share/filebeat/certs/ca/ca.crt
    restart: on-failure
    healthcheck:
      test: filebeat test beats
      interval: 30s
      timeout: 15s
      retries: 5

  #Metricbeat container
  metricbeat:
    container_name: metricbeat
    hostname: metricbeat
    user: root #To read the docker socket
    image: docker.elastic.co/beats/metricbeat:${ELASTIC_VERSION}
    volumes:
      #Mount the metricbeat configuration so users can make edits.
      - ./beats/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
      #Mount the modules.d directory into the container. This allows user to potentially make changes to the modules and they will be dynamically loaded.
      - ./beats/metricbeat/modules.d/:/usr/share/metricbeat/modules.d/
      #mount for GCP credentials
      - ./beats/metricbeat/modules.d/elastic-sa-dd4f67d589f9.json:/usr/share/metricbeat/modules.d/elastic-sa-dd4f67d589f9.json
      #The commented sections below enable Metricbeat to monitor the Docker host rather than the Metricbeat container. These are used by the system module.
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      #Allows us to report on docker from the hosts information.
      - /var/run/docker.sock:/var/run/docker.sock
      #We mount the host filesystem so we can report on disk usage with the system module.
      - /:/hostfs:ro
    
    command: metricbeat -e -strict.perms=false -E cloud.id=${BLOCKCHAIN_CLUSTER_UUID} -E cloud.auth=elastic:${BLOCKCHAIN_CLUSTER_PASS} -E monitoring.cloud.id=${MONITORING_CLUSTER_UUID} -E monitoring.cloud.auth=elastic:${MONITORING_CLUSTER_PASS} -E monitoring.elasticsearch.hosts=${MONITORING_ES_HOST} -E monitoring.cluster_uuid=${MONITORING_CLUSTER_UUID}
    # secrets:
    #   - source: metricbeat.yml
    #     target: /usr/share/metricbeat/metricbeat.yml
    #   - source: metricbeat.keystore
    #     target: /usr/share/metricbeat/metricbeat.keystore
    #   - source: ca.crt
    #     target: /usr/share/metricbeat/certs/ca/ca.crt
    networks: ['stack']
    restart: on-failure
    healthcheck:
      test: metricbeat test beats
      interval: 30s
      timeout: 15s
      retries: 5


  #Packetbeat container
  packetbeat:
    container_name: packetbeat
    hostname: packetbeat
    user: root #To read the docker socket
    image: "docker.elastic.co/beats/packetbeat:${ELASTIC_VERSION}"
    volumes:
      #Mount the packetbeat configuration so users can make edits.
      - ./beats/packetbeat/packetbeat.yml:/usr/share/packetbeat/packetbeat.yml
      #Allows us to report on docker from the hosts information.
      - /var/run/docker.sock:/var/run/docker.sock
    # Packetbeat needs some elevated privileges to capture network traffic. We'll grant them with POSIX capabilities.
    cap_add: ['NET_RAW', 'NET_ADMIN']
    # Use "host mode" networking to allow Packetbeat to capture traffic from the real network interface on the host,
    # rather than being isolated to the container's virtual interface.
    network_mode: host
    restart: on-failure
    command: packetbeat -e -strict.perms=false -E cloud.id=${BLOCKCHAIN_CLUSTER_UUID} -E cloud.auth=elastic:${BLOCKCHAIN_CLUSTER_PASS} -E monitoring.cloud.id=${MONITORING_CLUSTER_UUID} -E monitoring.cloud.auth=elastic:${MONITORING_CLUSTER_PASS} -E monitoring.elasticsearch.hosts=${MONITORING_ES_HOST} -E monitoring.cluster_uuid=${MONITORING_CLUSTER_UUID}
    # secrets:
    #   - source: packetbeat.yml
    #     target: /usr/share/packetbeat/packetbeat.yml
    #   - source: packetbeat.keystore
    #     target: /usr/share/packetbeat/packetbeat.keystore
    #   - source: ca.crt
    #     target: /usr/share/packetbeat/certs/ca/ca.crt
    healthcheck:
      test: packetbeat test beats
      interval: 30s
      timeout: 15s
      retries: 5

  #Configure Stack container. This short lived container configures the stack once Kibana and Elasticsearch are available. More specifically, using a script it sets passwords, import dashboards, sets a default index pattern, loads templates and pipelines
  # configure_stack:
  #   container_name: configure_stack
  #   image: docker.elastic.co/beats/metricbeat:${ELASTIC_VERSION}
  #   volumes: ['./configure-stack.sh:/usr/local/bin/configure-stack.sh:ro']
  #   command: ['/bin/bash', '-c', 'cat /usr/local/bin/configure-stack.sh | tr -d "\r" | bash']
  #   networks: ['stack']
  #   environment: ['ELASTIC_VERSION=${ELASTIC_VERSION}','ES_PASSWORD=${BLOCKCHAIN_CLUSTER_PASS}']

volumes:
  esdata:
    driver: local
  filebeatdata:
    driver: local
networks: {stack: {}}
